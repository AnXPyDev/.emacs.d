* Load modules
#+BEGIN_SRC emacs-lisp
  (lightning-load-module "use-package")
  (lightning-load-module "lookup-fonts")
  (lightning-load-module "lmodal")
  (lightning-load-module "make-no-insert-keymap")
#+END_SRC
* User variables
#+BEGIN_SRC emacs-lisp
  (setq user-name "AnXPyDev")
#+END_SRC
* Basic config
Disable bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
Clean up ui
#+BEGIN_SRC emacs-lisp
  (defun clean-up-ui()
    "Disables tool-bar, menu-bar and scroll-bar"
    (interactive)
    (ignore-errors (tool-bar-mode 0))
    (ignore-errors (menu-bar-mode 0))
    (ignore-errors (scroll-bar-mode 0)))
  (add-hook 'after-init-hook 'clean-up-ui)
  (clean-up-ui)
#+END_SRC
Disable auto save and backup
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC
Use y-n instead of yes-no
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
Treat all themes as safe
#+BEGIN_SRC emacs-lisp
  (setq custom-safe-themes t)
#+END_SRC
Indentation
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
  (setq-default indent-tabs-mode nil)
#+END_SRC
Default cursor
#+begin_src emacs-lisp
  (setq-default cursor-type 'hbar)
#+end_src
Default cursor blink
#+begin_src emacs-lisp
  (blink-cursor-mode 0)
#+end_src
Electric pairs mode
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode 1)
#+END_SRC
Text mode as default major mode
#+BEGIN_SRC emacs-lisp
  (setq-default major-mode 'text-mode)
#+END_SRC
* Packages
** ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (setq ivy-format-function 'ivy-format-function-line)
    (setf (alist-get 't ivy-format-functions-alist)
      #'ivy-format-function-line)
    (ivy-mode 1))
#+END_SRC
** general
#+BEGIN_SRC emacs-lisp
  (use-package general
    :ensure t)
#+END_SRC
** expand-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t)
#+END_SRC
** swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t)
#+END_SRC
** undo-tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :config (global-undo-tree-mode 1))
#+END_SRC
* Eshell
** count of shells
#+BEGIN_SRC emacs-lisp
  (defvar eshell-count 0)
#+END_SRC
** goto last eshell buffer
#+BEGIN_SRC emacs-lisp
  (defun eshell-last-buffer()
    (interactive)
    (catch 'break
      (dolist (buffer (buffer-list))
        (when (cl-search "*eshell*" (buffer-name buffer))
          (switch-to-buffer buffer)
          (throw 'break t)))))
#+END_SRC
** toggle-eshell
#+BEGIN_SRC emacs-lisp
  (defun eshell-toggle()
    (interactive)
    (if (cl-search "*eshell*" (buffer-name))
      (previous-buffer)
      (unless (eshell-last-buffer)
        (eshell-new))))
#+END_SRC
** spawn new shell
#+BEGIN_SRC emacs-lisp
  (defun eshell-new()
    (interactive)
    (setq eshell-count (+ eshell-count 1))
    (eshell eshell-count))
#+END_SRC
* Macros
* Languages
** Lisp
Fix lisp indenting
#+BEGIN_SRC emacs-lisp
  (setq lisp-indent-offset tab-width)
#+END_SRC
** C
Fix enum indent
#+BEGIN_SRC emacs-lisp
  (defun c-fix-offsets()
    (c-set-offset 'brace-list-intro tab-width)
    (c-set-offset 'brace-list-entry 0))

  (add-hook 'c-mode-hook 'c-fix-offsets)
#+END_SRC
* Editing functions
#+begin_src emacs-lisp
  (defun edit--insert-beginning-of-line()
    (interactive)
    (beginning-of-line)
    (lmodal-raise-insert-mode))

  (defun edit--insert-after-char()
    (interactive)
    (forward-char)
    (lmodal-raise-insert-mode))

  (defun edit--insert-end-of-line()
    (interactive)
    (end-of-line)
    (lmodal-raise-insert-mode))

  (defun edit--copy-whole-line()
    (interactive)
    (kill-whole-line)
    (yank))

  (defun edit--open-line-above()
    (interactive)
    (beginning-of-line)
    (open-line 1)
    (next-line))

  (defun edit--open-line-below()
    (interactive)
    (end-of-line)
    (open-line 1))

  (defun edit--yank-whole-line()
    (interactive)
    (edit--open-line-below)
    (next-line)
    (yank))

  (defun edit--region-line()
    (interactive)
    (beginning-of-line)
    (lmodal-raise-region-mode)
    (next-line))

  (defun edit--region-kill()
    (interactive)
    (kill-region (region-beginning) (region-end))
    (lmodal-raise-default-mode))

  (defun edit--region-copy()
    (interactive)
    (edit--region-kill)
    (yank))

  (defun edit--region-paste()
    (interactive)
    (delete-region (region-beginning) (region-end))
    (yank)
    (lmodal-raise-default-mode))

  (defun edit--region-substitute()
    (interactive)
    (delete-region (region-beginning) (region-end))
    (lmodal-raise-insert-mode))
#+end_src
* Keybindings
** Global map
#+BEGIN_SRC emacs-lisp
  (general-define-key)
#+END_SRC
** Leader map
#+BEGIN_SRC emacs-lisp
  (setq leader-map (make-sparse-keymap))

  (general-define-key
    :keymaps 'leader-map)
#+END_SRC
** Command map
#+BEGIN_SRC emacs-lisp
  (setq command-map (make-sparse-keymap))

  (general-define-key
    :keymaps 'command-map
    "e" 'execute-extended-command
    "f" 'find-file
    "d" 'dired
    "C-f" 'find-file
    "C-d" 'dired
    "s" 'save-buffer
    "C-s" 'save-some-buffers
    "M-s" 'save-some-buffers
    "b" 'ivy-switch-buffer
    "k" 'kill-buffer
    "RET" 'eshell-toggle
    "<C-return>" 'eshell-new
    "0" 'delete-window
    "o" 'other-window
    "3" 'split-window-right
    "2" 'split-window-below
    )
#+END_SRC
** Emacs
#+BEGIN_SRC emacs-lisp
  (setq emacs-map (make-sparse-keymap))

  (general-define-key
    :keymaps 'emacs-map
    "C-z" leader-map
    "C-e" command-map
    "M-q" 'lmodal-raise-default-mode
    "<escape>" 'keyboard-quit)
#+END_SRC
** Bare normal map
#+BEGIN_SRC emacs-lisp
  (setq modal-normal-bare-map
    (make-composed-keymap
      (list
        (copy-keymap emacs-map)
        (make-sparse-keymap))))

  (general-define-key
    :keymaps 'modal-normal-bare-map
    "M-e" 'lmodal-raise-emacs-mode
    "z" leader-map
    "e" command-map
    "h" 'backward-char
    "j" 'next-line
    "k" 'previous-line
    "l" 'forward-char
    "H" 'backward-word
    "J" 'scroll-up-command
    "K" 'scroll-down-command
    "L" 'forward-word
    "," 'beginning-of-line
    "<" 'beginning-of-line-text
    "." 'end-of-line
    ">" 'end-of-line
    "@" 'universal-argument
    "u" 'undo-tree-undo
    "U" 'undo-tree-redo
    "s" 'swiper)
#+END_SRC
** Normal map
#+BEGIN_SRC emacs-lisp
  (setq modal-normal-map
    (make-composed-keymap
      (list
        (copy-keymap modal-normal-bare-map)
        (make-no-insert-keymap))))

  (general-define-key
    :keymaps 'modal-normal-map
    "i" 'lmodal-raise-insert-mode
    "I" 'edit--insert-beginning-of-line
    "a" 'edit--insert-after-char
    "A" 'edit--insert-end-of-line
    "r" 'lmodal-raise-region-mode
    "R" 'edit--region-line
    "d" 'delete-char
    "D" 'kill-whole-line
    "c" (lambda() (interactive) (kill-region (point-at-bol) (point-at-eol)) (yank))
    "C" (kbd "c")
    "v" 'yank
    "V" (lambda() (interactive) (end-of-line) (open-line 1) (next-line) (yank))
    ";" 'comment-line
    "TAB" (kbd "<tab>")
    )
#+END_SRC
** Normal org map
#+BEGIN_SRC emacs-lisp
  (setq modal-normal-org-map (copy-keymap modal-normal-map))

  (general-define-key
    :keymaps 'modal-normal-org-map
    "<tab>" 'org-cycle)
#+END_SRC
** Region map
#+BEGIN_SRC emacs-lisp
  (setq modal-region-map
    (make-composed-keymap
      (list
        (copy-keymap modal-normal-bare-map)
        (make-no-insert-keymap))))


  (general-define-key
    :keymaps 'modal-region-map
    "<escape>" 'lmodal-raise-default-mode
    "C-g" 'lmodal-raise-default-mode
    "M-q" 'lmodal-raise-default-mode
    "r" 'er/expand-region
    "c" 'edit--region-copy
    "d" 'edit--region-kill
    "v" 'edit--region-paste
    "t" 'edit--region-substitute
    ";" 'comment-region
    )
#+END_SRC
** Insert map
#+BEGIN_SRC emacs-lisp
  (setq modal-insert-map (copy-keymap emacs-map))

  (general-define-key
    :keymaps 'modal-insert-map
    "<escape>" 'lmodal-raise-default-mode
    "M-q" 'lmodal-raise-default-mode)
#+END_SRC
** Ivy map
#+BEGIN_SRC emacs-lisp
  (general-define-key
    :keymaps 'ivy-minibuffer-map
    "<escape>" 'minibuffer-keyboard-quit
    "C-j" 'ivy-next-line
    "C-k" 'ivy-previous-line
    "M-j" 'ivy-next-line
    "M-k" 'ivy-previous-line
    "TAB" 'ivy-partial-or-done
    "RET" 'ivy-done
    "<C-return>" 'ivy-immediate-done)
#+END_SRC
** Eshell
#+BEGIN_SRC emacs-lisp
  (setq modal-eshell-map (copy-keymap emacs-map))



  (defun eshell-attach-map()
    (setq eshell-map modal-eshell-map))

  (add-hook 'eshell-mode-hook 'eshell-attach-map)
#+END_SRC

** Text mode
#+BEGIN_SRC emacs-lisp
  (general-define-key
    :keymaps 'text-mode-map
    "<tab>" 'tab-to-tab-stop
    "TAB" (kbd "<tab>"))
#+END_SRC
* Modal
Cursors for modes
#+BEGIN_SRC emacs-lisp
  (setq modal-emacs-cursor 'box)
  (setq modal-normal-cursor 'hbar)
  (setq modal-insert-cursor 'bar)
#+END_SRC
Define modes
#+BEGIN_SRC emacs-lisp
  (lmodal-define-mode emacs
    :keymap emacs-map
    :lighter " [E]"
    :cursor modal-emacs-cursor)

  (lmodal-define-mode normal
    :keymap modal-normal-map
    :lighter " [N]"
    :cursor modal-normal-cursor)

  (lmodal-define-mode normal
    :major-mode org-mode
    :keymap modal-normal-org-map
    :lighter " [N-org]"
    :cursor modal-normal-cursor)

  (lmodal-define-mode region
    :keymap modal-region-map
    :lighter " [R]"
    :cursor modal-normal-cursor
    :on-enable (set-mark (point))
    :on-disable (pop-mark))

  (lmodal-define-mode insert
    :keymap modal-insert-map
    :lighter " [I]"
    :cursor modal-insert-cursor)
#+END_SRC
Initialize lmodal
#+BEGIN_SRC emacs-lisp
  (lmodal-set-default-mode normal)
  (lmodal-set-default-mode emacs dired-mode)
  (lmodal-set-default-mode emacs eshell-mode)
  (lmodal-set-default-mode emacs term-mode)

  (lmodal-global-mode 1)
#+END_SRC
* Appearance
** Highlight indentation guides
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :ensure t
    :config
    (setq highlight-indent-guides-method 'character)
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))
#+END_SRC
** All the icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (setq initial-buffer-choice (lambda() (get-buffer "*dashboard*")))
    (setq dashboard-banner-logo-title "Welcome to Lightning Emacs")
    (setq dashboard-center-content t)
    (setq dashboard-startup-banner (concat lightning-config-directory "banner.png"))
    (dashboard-setup-startup-hook))

#+END_SRC
** Prettify symbols
#+BEGIN_SRC emacs-lisp
  (setq-default prettify-symbols-alist
    '(("lambda" . "λ")))

  (global-prettify-symbols-mode t)
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t
    :config
    (powerline-center-theme))
#+END_SRC
** Headerline
#+BEGIN_SRC emacs-lisp
  (setq-default header-line-format
    " %b")
#+END_SRC
Gui Theme
#+BEGIN_SRC emacs-lisp
  (defun theme-headerline-gui()
    (set-face-attribute 'header-line nil
      :foreground (face-attribute 'line-number-current-line :foreground)
      :height 110))
#+END_SRC
** Beacon
#+BEGIN_SRC emacs-lisp
  ;; (use-package beacon
  ;;   :ensure t)
#+END_SRC
** Themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes)
#+END_SRC
** Theme for gui
#+BEGIN_SRC emacs-lisp
  (defun theme-gui()
    (global-hl-line-mode t)
    ;; (beacon-mode)
    (set-face-font 'default
      (concat
        (lookup-fonts
          "Consolas"
          "Monospace")
        " 12"))
    (theme-headerline-gui)
    (set-face-attribute 'fringe nil
      :background (face-attribute 'default :background)))
#+END_SRC
** Theme for tui
#+BEGIN_SRC emacs-lisp
  (defun theme-tui())
#+END_SRC
** General theme
Line numbers
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode 1)
#+END_SRC
Disable line numbers in terminals
#+BEGIN_SRC emacs-lisp
  (defun disable-display-line-numbers()
    (display-line-numbers-mode 0))

  (add-hook 'term-mode-hook 'disable-display-line-numbers)
  (add-hook 'eshell-mode-hook 'disable-display-line-numbers)
#+END_SRC
Visual line mode
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode 1)
#+END_SRC
General theme loader
#+BEGIN_SRC emacs-lisp
  (defun theme-general())
#+END_SRC
** Initialize theme
#+BEGIN_SRC emacs-lisp
  (defun reload-theme()
    (interactive)
    (if (display-graphic-p)
      (theme-gui)
      (theme-tui))
    (theme-general))

  (defadvice load-theme (after load-theme-after activate)
    (reload-theme))

  (if (display-graphic-p)
    (load-theme 'doom-wilmersdorf)
    (reload-theme))
#+END_SRC
