* Load lightning modules
#+BEGIN_SRC emacs-lisp
  (lightning-load-module "package-manager")
  (lightning-load-module "make-no-insert-keymap")
  (lightning-load-module "modal")
  (lightning-load-module "sensible-defaults")
#+END_SRC
* General customiztions
Set username
#+BEGIN_SRC emacs-lisp
  (setq lightning-user-name "AnXPyDev")
#+END_SRC
Enable electric-pair mode
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode 1)
#+END_SRC
Enable line numbers
#+BEGIN_SRC emacs-lisp
  (global-linum-mode 1)
  (setq linum-format " %3d ")
#+END_SRC
Enable text wrapping (visual lines)
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode 1)
#+END_SRC
Setup indent width (and use spaces instead of tabs)
#+BEGIN_SRC emacs-lisp
  (setq lightning-user-indent-offset 2)
  (setq lightning-user-indent-use-spaces t)
#+END_SRC
Set scroll step to 1 for smoother scrolling
#+BEGIN_SRC emacs-lisp
  (setq-default scroll-step 1)
#+END_SRC
Automatically revert buffers and disable revert messages
#+BEGIN_SRC emacs-lisp
  (setq auto-revert-verbose nil)
  (global-auto-revert-mode)
#+END_SRC
Cursor settings
#+BEGIN_SRC emacs-lisp
  (setq lightning-user-default-cursor-type 'hbar)
  (blink-cursor-mode 0)
#+END_SRC
Apply lightning variables
#+BEGIN_SRC emacs-lisp
  (lightning-apply-user-variables)
#+END_SRC
* Packages
** general
#+BEGIN_SRC emacs-lisp
  (lightning-pkg general :require t)
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
  (lightning-pkg which-key :require t)
  (which-key-mode 1)
#+END_SRC
** swiper
#+BEGIN_SRC emacs-lisp
  (lightning-pkg swiper :require t)
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
  (lightning-pkg company :require t)
#+END_SRC
** projectile
#+BEGIN_SRC emacs-lisp
  (lightning-pkg projectile :require t)
  (projectile-global-mode 1)
#+END_SRC
** ivy
#+BEGIN_SRC emacs-lisp
  (lightning-pkg ivy :require t)
  (ivy-mode 1)
#+END_SRC
** highlight parentheses
#+BEGIN_SRC emacs-lisp
  (lightning-pkg highlight-parentheses :require t)
  (global-highlight-parentheses-mode)
#+END_SRC
** dashboard
#+BEGIN_SRC emacs-lisp
  (lightning-pkg dashboard :require t)
  (dashboard-setup-startup-hook)
  (setq dashboard-startup-banner (concat lightning-config-directory "banner.png"))
  (setq dashboard-items '((recents . 5)
        (projects . 5)))
  (setq dashboard-banner-logo-title "Welcome to Emacs.")
#+END_SRC
** minor-mode-hack
#+BEGIN_SRC emacs-lisp
  (lightning-pkg minor-mode-hack :require t)
#+END_SRC
** avy
#+BEGIN_SRC emacs-lisp
  (lightning-pkg avy :require t)
#+END_SRC
** elmacro
#+BEGIN_SRC emacs-lisp
  (lightning-pkg elmacro :require t)
  (elmacro-mode 1)
#+END_SRC
** undo-tree
#+BEGIN_SRC emacs-lisp
  (lightning-pkg undo-tree :require t)
  (global-undo-tree-mode)
#+END_SRC
** expand-region
#+BEGIN_SRC emacs-lisp
  (lightning-pkg expand-region :require t)
#+END_SRC
** multiple-cursors
#+BEGIN_SRC emacs-lisp
  (lightning-pkg multiple-cursors :require t)
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
  (lightning-pkg flycheck :require t)
  (global-flycheck-mode t)
#+END_SRC
Disable overlay and change fringe shape
#+BEGIN_SRC emacs-lisp
  (define-fringe-bitmap 'flycheck-fringe-bitmap-rectangle
    (vector #b11100000
            #b11100000
            #b11100000
            #b11100000
            #b11100000
            #b11100000
            #b11100000
            #b11100000
            #b11100000
            #b11100000
            #b11100000
            #b11100000
            #b11100000
            #b11100000
            #b11100000
            #b11100000
            #b11100000
            #b11100000
            #b11100000
            #b11100000
            #b11100000
            #b11100000
            #b11100000
            #b11100000
            #b11100000
            #b11100000))

  (flycheck-define-error-level 'error
    ;;:overlay-category 'flycheck-error-overlay
    :fringe-bitmap 'flycheck-fringe-bitmap-rectangle
    :fringe-face 'flycheck-fringe-error
    :error-list-face 'flycheck-error-list-error)

  (flycheck-define-error-level 'warning
    ;;:overlay-category 'flycheck-warning-overlay
    :fringe-bitmap 'flycheck-fringe-bitmap-rectangle
    :fringe-face 'flycheck-fringe-warning
    :error-list-face 'flycheck-error-list-warning)

  (flycheck-define-error-level 'info
    ;;:overlay-category 'flycheck-info-overlay
    :fringe-bitmap 'flycheck-fringe-bitmap-rectangle
    :fringe-face 'flycheck-fringe-info
    :error-list-face 'flycheck-error-list-info)
#+END_SRC
Disable minibuffer messages about errors
#+BEGIN_SRC emacs-lisp
  (setq flycheck-display-errors-function nil)
#+END_SRC
** origami
#+BEGIN_SRC emacs-lisp
  (lightning-pkg origami :require t)
  (global-origami-mode t)
#+END_SRC
** hlinum
#+BEGIN_SRC emacs-lisp
  (lightning-pkg hlinum :require t)
#+END_SRC
** themes
#+BEGIN_SRC emacs-lisp
  (lightning-pkg kaolin-themes)
  (lightning-pkg arc-dark-theme)
#+END_SRC
* Programming Languages
** Python
#+BEGIN_SRC emacs-lisp
  (setq-default python-indent-offset lightning-user-indent-offset)
#+END_SRC
** Lua
Lua mode
#+BEGIN_SRC emacs-lisp
  (lightning-pkg lua-mode :require t)
#+END_SRC
Lua mode for company
#+BEGIN_SRC emacs-lisp
  (lightning-pkg company-lua :require t)
  (eval-after-load 'company
    '(add-to-list 'company-backends 'company-lua))
#+END_SRC
Set Lua indentation width
#+BEGIN_SRC emacs-lisp
  (setq lua-indent-level tab-width)
#+END_SRC
Fix for broken lua-mode indentation
#+BEGIN_SRC emacs-lisp
  (defun lua-calculate-modifier (modifier)
    (if (= modifier 0)
        0
      lua-indent-level))

  (defun lua-calculate-indentation (&optional parse-start)
    (save-excursion
      (let ((continuing-p (lua-is-continuing-statement-p))
            (cur-line-begin-pos (line-beginning-position)))
        (or
         (lua-calculate-indentation-override)

         (when (lua-forward-line-skip-blanks 'back)
           (let* ((modifier
                   (lua-calculate-indentation-block-modifier cur-line-begin-pos)))
             (+ (current-indentation) (lua-calculate-modifier modifier))))
         0))))

  (defun lua-calculate-indentation-override (&optional parse-start)
    "Return overriding indentation amount for special cases.
  Look for an uninterrupted sequence of block-closing tokens that starts
  at the beginning of the line. For each of these tokens, shift indentation
  to the left by the amount specified in lua-indent-level."
    (let ((indentation-modifier 0)
          (case-fold-search nil)
          (block-token nil))
      (save-excursion
        (if parse-start (goto-char parse-start))
        ;; Look for the last block closing token
        (back-to-indentation)
        (if (and (not (lua-comment-or-string-p))
                 (looking-at lua-indentation-modifier-regexp)
                 (let ((token-info (lua-get-block-token-info (match-string 0))))
                   (and token-info
                        (not (eq 'open (lua-get-token-type token-info))))))
            (when (lua-goto-matching-block-token nil nil 'backward)
              ;; Exception cases: when the start of the line is an assignment,
              ;; go to the start of the assignment instead of the matching item
              (let ((block-start-column (current-column))
                    (block-start-point (point)))
                (if (lua-point-is-after-left-shifter-p)
                    (current-indentation)
                  block-start-column)))))))

  (defun lua-calculate-indentation-override (&optional parse-start)
    "Return overriding indentation amount for special cases.
  Look for an uninterrupted sequence of block-closing tokens that starts
  at the beginning of the line. For each of these tokens, shift indentation
  to the left by the amount specified in lua-indent-level."
    (let ((indentation-modifier 0)
          (case-fold-search nil)
          (block-token nil))
      (save-excursion
        (if parse-start (goto-char parse-start))
        ;; Look for the last block closing token
        (back-to-indentation)
        (if (and (not (lua-comment-or-string-p))
                 (looking-at lua-indentation-modifier-regexp)
                 (let ((token-info (lua-get-block-token-info (match-string 0))))
                   (and token-info
                        (not (eq 'open (lua-get-token-type token-info))))))
            (when (lua-goto-matching-block-token)
              ;; Exception cases: when the start of the line is an assignment,
              ;; go to the start of the assignment instead of the matching item
              (let ((block-start-column (current-column))
                    (block-start-point (point)))
                (if (lua-point-is-after-left-shifter-p)
                    (current-indentation)
                  (current-indentation))))))))

#+END_SRC
** MoonScript
Install moonscript mode
#+BEGIN_SRC emacs-lisp
  (lightning-pkg moonscript :require t)
#+END_SRC
** C/C++
Install irony, a c/c++ completion package
#+BEGIN_SRC emacs-lisp
  (lightning-pkg irony :require t)
  (lightning-pkg company-irony :require t)
  (lightning-pkg company-c-headers :require t)
#+END_SRC
Adds hooks to both c and c++ mode
#+BEGIN_SRC emacs-lisp
  (defun lang-c/add-hook (func-name)
    (add-hook 'c++-mode-hook func-name)
    (add-hook 'c-mode-hook func-name))
#+END_SRC
Initialize irony if current system isn't windows
#+BEGIN_SRC emacs-lisp
  (when (not (string-equal system-type "windows-nt"))
    (lang-c/add-hook 'irony-mode))
#+END_SRC
Use gcc flycheck checker instead of clang
#+BEGIN_SRC emacs-lisp
  (defun lang-c/change-checker()
    (add-to-list 'flycheck-disabled-checkers 'c/c++-clang)
    (add-to-list 'flycheck-enabled-checkers 'c/c++-gcc)
    (delete 'c/c++-clang flycheck-enabled-checkers))

  (lang-c/add-hook 'lang-c/change-checker)
#+END_SRC
** Shell Script
#+BEGIN_SRC emacs-lisp
  (setq-default sh-basic-offset tab-width)
#+END_SRC
** D
Install d mode package
#+BEGIN_SRC emacs-lisp
  (lightning-pkg d-mode :require t)
#+END_SRC
* Keybindings
** make-normal-sparse-keymap

Returns a keymap, where all the self-inserting characters are ignored
#+BEGIN_SRC emacs-lisp
  (setq self-inserting-characters '("`" "1" "2" "3" "4" "5" "6" "7" "8" "9" "0" "-" "=" "q" "w" "e" "r" "t" "y" "u" "i" "o" "p" "[" "]" "a" "s" "d" "f" "g" "h" "j" "k" "l" ";" "'" "\\" "z" "x" "c" "v" "b" "n" "m" "," "." "/" "TAB" "SPC" "<tab>" "<space>" "~" "@" "#" "$" "%" "^" "&" "*" "(" ")" "_" "+" "Q" "W" "E" "R" "T" "Y" "U" "I" "O" "P" "{" "}" "A" "S" "D" "F" "G" "H" "J" "K" "L" ":" "\"" "|" ">" "Z" "X" "C" "V" "B" "N" "M" "<" ">" "?" "DEL"))

  (defun make-normal-sparse-keymap()
    (setq result (make-sparse-keymap))
    (dolist (char self-inserting-characters)
      (define-key result (kbd char) 'ignore))
    result)
#+END_SRC
** Leader
#+BEGIN_SRC emacs-lisp
  (setq leader-map (make-sparse-keymap))

  (general-define-key
   :keymaps 'leader-map
    "SPC" 'execute-extended-command
    "s" 'save-some-buffers
    "b" 'ivy-switch-buffer
    "f" 'find-file
    "d" 'dired
    "k" 'kill-buffer
    "RET" 'eshell/toggle
    "<return>" 'eshell/toggle
    "C-RET" 'eshell/new
    "C-<return>" 'eshell/new
    "e b" 'eval-buffer
    "e r" 'eval-region
    "e e" 'eval-expression)
#+END_SRC
** Globals
#+BEGIN_SRC emacs-lisp
  (general-define-key
   "C-z" nil
   "C-SPC" leader-map
   "C-@" leader-map
   "<escape>" (kbd "C-g")
   "M-q" (lambda() (interactive) (lightning-modal-raise-default-mode))
   "M-e" (lambda() (interactive) (lightning-modal-disable-all-modes)))
#+END_SRC
** normal bare map
Used as a base for other maps
#+BEGIN_SRC emacs-lisp
  (setq modal/normal-bare-map (make-sparse-keymap))

  (general-define-key
   :keymaps 'modal/normal-bare-map
   "k" 'previous-line
   "K" 'scroll-down-command
   "j" 'next-line
   "J" 'scroll-up-command
   "h" 'backward-char
   "H" 'backward-word
   "l" 'forward-char
   "L" 'forward-word
   "a" 'beginning-of-line
   "f" 'end-of-line
   "SPC" leader-map)
#+END_SRC
** normal-mode map
#+BEGIN_SRC emacs-lisp
  (setq modal/normal-map (make-composed-keymap (list (copy-keymap modal/normal-bare-map)) (make-normal-sparse-keymap)))

  (general-define-key
   :keymaps 'modal/normal-map
   "q" (lambda() (interactive) (lightning-modal-raise-mode insert))
   "Q" 'edit/insert-beginning-of-line
   "r" 'edit/insert-after
   "R" 'edit/insert-end-of-line
   "e" 'edit/set-region
   "E" 'edit/set-region-line
   "s" 'edit/copy-whole-line
   "S" 'edit/copy-whole-line
   "d" (kbd "C-d")
   "D" 'kill-whole-line
   "w" 'yank
   "W" 'edit/yank-line
   "/" 'swiper
   "u" 'undo-tree-undo
   "U" 'undo-tree-redo
   "n" 'edit/open-line
   "N" (lambda() (interactive) (edit/open-line) (lightning-modal-raise-mode insert))
   "p" 'edit/open-line-above
   "P" (lambda() (interactive) (edit/open-line-above) (lightning-modal-raise-mode insert))
   "g" nil
   "g l" 'isearch-forward
   "g h" 'isearch-backward
   "g c" 'avy-goto-char
   "g l" 'avy-goto-line
   "m" 'edit/insert-mark
   "M" 'edit/goto-mark
   "TAB" 'origami-toggle-node
   "<tab>" 'origami-toggle-node)
#+END_SRC
** region-mode map
#+BEGIN_SRC emacs-lisp
  (setq modal/region-map (make-composed-keymap (list (copy-keymap modal/normal-bare-map)) (make-normal-sparse-keymap)))

  (general-define-key
   :keymaps 'modal/region-map
   "t" (lambda() (interactive) (kill-region (region-beginning) (region-end)) (lightning-modal-raise-mode insert))
   "s" (lambda() (interactive) (copy-region-as-kill (region-beginning) (region-end)) (lightning-modal-raise-default-mode))
   "d" (lambda() (interactive) (kill-region (region-beginning) (region-end)) (lightning-modal-raise-default-mode))
   "w" 'edit/yank-region
   "C-g" (lambda() (interactive) (pop-mark) (lightning-modal-raise-default-mode))
   "M-q" (lambda() (interactive) (pop-mark) (lightning-modal-raise-default-mode))
   "<escape>" (lambda() (interactive) (pop-mark) (lightning-modal-raise-default-mode))
   "e" 'er/expand-region
   "TAB" (lambda() (interactive) (indent-region (region-beginning) (region-end)) (lightning-modal-raise-default-mode))
   "<tab>" (lambda() (interactive) (indent-region (region-beginning) (region-end)) (lightning-modal-raise-default-mode))
   "g" nil
   "g l" 'isearch-forward
   "g h" 'isearch-backward
   ";" 'comment-or-uncomment-region
   "o" nil
   "o (" (lambda() (interactive) (edit/surround-region "(" ")") (lightning-modal-raise-default-mode))
   "o o" (lambda() (interactive) (edit/surround-region (read-from-minibuffer "left: ") (read-from-minibuffer "right: ")) (lightning-modal-raise-default-mode))
   "o )" (lambda() (interactive) (edit/surround-region "(" ")") (lightning-modal-raise-default-mode))
   "o {" (lambda() (interactive) (edit/surround-region "{" "}") (lightning-modal-raise-default-mode))
   "o }" (lambda() (interactive) (edit/surround-region "{" "}") (lightning-modal-raise-default-mode))
   "o [" (lambda() (interactive) (edit/surround-region "[" "]") (lightning-modal-raise-default-mode))
   "o ]" (lambda() (interactive) (edit/surround-region "[" "]") (lightning-modal-raise-default-mode))
   "o \"" (lambda() (interactive) (edit/surround-region "\"" "\"") (lightning-modal-raise-default-mode))
   "o <" (lambda() (interactive) (edit/surround-region "<" ">") (lightning-modal-raise-default-mode))
   "o '" (lambda() (interactive) (edit/surround-region "'" "'") (lightning-modal-raise-default-mode)))
#+END_SRC
** insert-mode map
This is the same as emacs-map
#+BEGIN_SRC emacs-lisp
  (setq modal/insert-map (make-sparse-keymap))

  (general-define-key
   :keymaps 'modal/insert-map
   "C-g" (lambda() (interactive) (lightning-modal-raise-default-mode)))
#+END_SRC
** company-active-map
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps 'company-active-map
   "<tab>" 'company-complete
   "TAB" 'company-complete)
#+END_SRC
** eshell map
#+BEGIN_SRC emacs-lisp
  (defun set-eshell-custom-map()
    (general-define-key
      :keymaps 'eshell-mode-map
      "C-SPC" leader-map
      "C-@" leader-map))

  (add-hook 'eshell-mode-hook 'set-eshell-custom-map)
#+END_SRC
** dired-mode map
#+BEGIN_SRC emacs-lisp
  (require 'dired)
  (setq dired-mode-map (make-composed-keymap (list (copy-keymap modal/normal-bare-map)) dired-mode-map))

  (general-define-key
   :keymaps 'dired-mode-map
   "q" (lambda() (interactive) (wdired-change-to-wdired-mode) (lightning-modal-raise-default-mode)))
#+END_SRC
** wdired-normal-mode map
#+BEGIN_SRC emacs-lisp
  (setq modal/wdired-normal-map (copy-keymap modal/normal-map))

  (general-define-key
   :keymaps 'modal/wdired-normal-map
   "SPC s" (lambda() (interactive) (wdired-finish-edit) (lightning-modal-raise-default-mode)))
#+END_SRC
** org-normal-mode map
#+BEGIN_SRC emacs-lisp
  (setq modal/org-normal-map (copy-keymap modal/normal-map))

  (general-define-key
   :keymaps 'modal/org-normal-map
   "TAB" 'org-cycle
   "<tab>" 'org-cycle)
#+END_SRC
** ivy minibuffer map
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps 'ivy-minibuffer-map
   "M-j" 'ivy-next-line
   "M-k" 'ivy-previous-line
   "M-RET" 'ivy-immediate-done
   "TAB" 'ivy-partial-or-done
   "RET" 'ivy-done)
#+END_SRC
* Modal
This is a custom implementation of modal editing, similiar to vim's, including normal, insert, and region mode
** modal editing implementation using lightning-modal
#+BEGIN_SRC emacs-lisp
  (lightning-modal-ignore-major-mode eshell-mode)
  (lightning-modal-ignore-major-mode dired-mode)
  (lightning-modal-ignore-major-mode ibuffer-mode)

  (lightning-modal-define-mode normal :keymap modal/normal-map :lighter " [N]" :doc "Normal mode"
                      :on-enable (setq cursor-type lightning-user-default-cursor-type))
  (lightning-modal-define-mode insert :keymap modal/insert-map :lighter " [I]" :doc "Insert mode"
                      :on-enable (setq cursor-type 'bar))
  (lightning-modal-define-mode region :keymap modal/region-map :lighter " [R]" :doc "Region mode"
                      :on-enable (setq cursor-type lightning-user-default-cursor-type))
  (lightning-modal-define-mode wdired-normal :keymap modal/wdired-normal-map :lighter " [N]" :doc "Normal mode for wdired"
                      :on-enable (setq cursor-type lightning-user-default-cursor-type))
  (lightning-modal-define-mode org-normal :keymap modal/org-normal-map :lighter " [N]" :doc "Normal mode for org"
                      :on-enable (setq cursor-type lightning-user-default-cursor-type))

  (lightning-modal-set-default-mode normal)
  (lightning-modal-pair-major-mode wdired-mode wdired-normal)
  (lightning-modal-pair-major-mode org-mode org-normal)

  (lightning-modal-global-mode t)
#+END_SRC
* Editing functions
** surround
Functions that surround a region with an opening and closing string
#+BEGIN_SRC emacs-lisp
  (defun edit/surround(start end open close)
    (save-excursion
      (goto-char start)
      (insert open)
      (goto-char (+ end 1))
      (insert close)))

  (defun edit/surround-region(open close)
    (when (region-active-p)
      (edit/surround (region-beginning) (region-end) open close)))
#+END_SRC
** other misc. editing functions
#+BEGIN_SRC emacs-lisp
  (defun edit/insert-after()
    (interactive)
    (forward-char)
    (lightning-modal-raise-mode insert))

  (defun edit/insert-end-of-line()
    (interactive)
    (end-of-line)
    (lightning-modal-raise-mode insert))

  (defun edit/insert-beginning-of-line()
    (interactive)
    (beginning-of-line)
    (lightning-modal-raise-mode insert))

  (defun edit/set-region()
    (interactive)
    (set-mark (point))
    (lightning-modal-raise-mode region))

  (defun edit/set-region-line()
    (interactive)
    (beginning-of-line)
    (set-mark (point))
    (end-of-line)
    (lightning-modal-raise-mode region))

  (defun edit/open-line()
    (interactive)
    (end-of-line)
    (open-line 1)
    (next-line))

  (defun edit/open-line-above()
    (interactive)
    (beginning-of-line)
    (open-line 1))

  (defun edit/yank-line()
    (interactive)
    (save-excursion
      (edit/open-line)
      (yank)
      (delete-blank-lines)))

  (defun edit/kill-whole-word()
    (interactive)
    (backward-char)
    (forward-word)
    (backward-kill-word 1))

  (defun edit/copy-whole-line()
    (interactive)
    (save-excursion
      (kill-whole-line)
      (yank)))

  (defun edit/yank-region()
    (interactive)
    (kill-region (region-beginning) (region-end))
    (yank 2)
    (lightning-modal-raise-default-mode))

  (defun edit/insert-mark()
    (interactive)
    (insert "<++>"))

  (defun edit/goto-mark()
    (interactive)
    (search-forward "<++>")
    (search-backward "<")
    (delete-char  4)
    (lightning-modal-raise-mode insert))
#+END_SRC
* Misc. functions
** macro-make-functions
Evaluates a elmacro generated defun
#+BEGIN_SRC emacs-lisp
  (defun macro-make-function(&optional name)
    (interactive)
    (if (called-interactively-p 'any)
        (setq name (read-string "Macro name: "))
      (setq name (if name name "last-macro")))
    (setq function-string (pp-to-string (elmacro-make-defun (make-symbol (concat "macros/" name)) (elmacro-extract-last-macro elmacro-command-history))))
    (message function-string)
    (set-buffer (generate-new-buffer "*temporaryMacroBuffer*"))
    (erase-buffer)
    (insert function-string)
    (eval-buffer)
    (message function-string)
    (kill-buffer "*temporaryMacroBuffer*"))
#+END_SRC
* Eshell
** eshell/get-last-eshell-buffer
Returns the most recently used eshell buffer
#+BEGIN_SRC emacs-lisp
  (defun eshell/get-last-eshell-buffer()
    (catch 'buffer
      (dolist (buffer (buffer-list))
        (when (cl-search "*eshell*" (buffer-name buffer))
          (throw 'buffer buffer)))))
#+END_SRC
** eshell/switch-to-last-eshell-buffer
Switches to most recent eshell buffer or creates a new one
#+BEGIN_SRC emacs-lisp
  (defun eshell/switch-to-last-eshell-buffer()
    (let ((buffer (eshell/get-last-eshell-buffer)))
      (if buffer
          (switch-to-buffer buffer)
        (eshell))))
#+END_SRC
** eshell/toggle
Switches to eshell if the current buffer isn't an eshell buffer, else returns to previous buffer
#+BEGIN_SRC emacs-lisp
  (defun eshell/toggle()
    (interactive)
    (if (cl-search "*eshell" (buffer-name))
        (switch-to-prev-buffer)
      (eshell/switch-to-last-eshell-buffer)))
#+END_SRC
** eshell-new
Creates a new numbered eshell buffer
#+BEGIN_SRC emacs-lisp
  (setq eshell/new-count 1)
  (defun eshell/new()
    (interactive)
    (eshell eshell/new-count)
    (setq eshell/new-count (+ 1 eshell/new-count)))
#+END_SRC
** eshell-clear
#+BEGIN_SRC emacs-lisp
  (defun eshell/clear ()
    (interactive)
    "Clear the eshell buffer."
    (let ((inhibit-read-only t))
      (erase-buffer)
      (eshell-send-input)))
#+END_SRC
** misc.
Disable linum mode in eshell
#+BEGIN_SRC emacs-lisp
  (add-hook 'eshell-mode-hook (lambda() (interactive) (linum-mode 0)))
#+END_SRC
* Theme
** all-the-icons
#+BEGIN_SRC emacs-lisp
  (lightning-pkg all-the-icons :require t)
  (lightning-pkg all-the-icons-dired :require t)
#+END_SRC
** headerline
#+BEGIN_SRC emacs-lisp
  (setq-default header-line-format '(" %b"))
#+END_SRC
** modeline
#+BEGIN_SRC emacs-lisp
  (setq-default mode-line-format '(" %l : %c : %i"))
#+END_SRC
** theme for tty, where gui is unavailable
#+BEGIN_SRC emacs-lisp
  (defun theme/tty()
    (set-face-attribute 'company-tooltip nil
            :background "#FFFFFF"))
#+END_SRC
** theme for gui
#+BEGIN_SRC emacs-lisp
  (defun theme/gui()
    (setq font-name (or
          (catch 'font-name
            (dolist (font '("Cascadia Mono" "Consolas"))
              (when (find-font (font-spec :name font))
                (throw 'font-name font)))) "monospace"))

    (set-face-attribute 'default nil
                        :family font-name
                        :height 112)
    (set-face-attribute 'linum nil
                        :height 'unspecified
                        :inherit 'default))
#+END_SRC
** general theme customizations
#+BEGIN_SRC emacs-lisp
  (defun theme/general()
    (set-face-attribute 'header-line nil
                        :foreground (face-attribute 'linum :foreground)
                        :background (face-attribute 'default :background)
                        :height (- (face-attribute 'default :height) 5)
                        :inherit nil)

    (set-face-attribute 'header-line-highlight nil
                        :foreground (face-attribute 'header-line :foreground)
                        :background (face-attribute 'header-line :background)
                        :height (face-attribute 'header-line :height)
                        :inherit nil)

    )
#+END_SRC
** reload theme
#+BEGIN_SRC emacs-lisp
  (defun theme/reload()
    (interactive)
    (if (and (display-graphic-p) (not (daemonp)))
        (theme/gui)
      (theme/tty))
    (theme/general))

  (advice-add 'load-theme :after (lambda(&rest args) (theme/reload)))
#+END_SRC
** initialize theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'arc-dark)
#+END_SRC
